const jwt = require("jsonwebtoken");
/*
    The user is required to be logged in to be able to use any PRIVATE ENDPOINTS.
*/
const isAuthorizedAdmin = (req, res, next) => {
  try {
    // [1] Extract the Cookie from the Request.
    const token = req.cookies.token;

    // [2] If there is no token, or the token is empty.
    if (!token) {
      return res
        .status(401) // Unauthorized
        .json({ errorMessage: "Unauthorized." });
    } // No code after this should run.  Not authorized to continue.

    // [3] Validate the Token:
    // If it fails, it will throw an error.
    // If it succeeds, it will return the payload.
    // Check if the token has been generated by the correct Private Key.
    const verified = jwt.verify(token, process.env.PRIVATE_KEY);
    // console.log(verified);

    // [4] Add data to the `req` object, in this case `verified.ID`.
    req.employeeId = verified.ID; // `ID` is just the MongoDB `_id` field, which is a String.

    const check = verified.role === "admin";

    // [5] Move On
    // Exits out of the `isAuthorizedAdmin` middleware, and the request continues its journey.
    if (check) {
      next();
    } else {
      throw Error("You are not an admin");
    }
  } catch (error) {
    // 401 = Unauthorized.
    console.error(error);
    res.status(401).json({ errorMessage: "Unauthorized. 馬鹿!" });
  }
};

module.exports = isAuthorizedAdmin;
